{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","previousOperand","evaluate","length","slice","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","integer","decimal","split","format","App","useReducer","className","id","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.5949bb6a.chunk.js","sourcesContent":["import { ACTIONS } from \"./App\";\n\nexport default function DigitButton({ dispatch, digit }) {\n  return (\n    <button\n      onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\n    >\n      {digit}\n    </button>\n  );\n}\n","import { ACTIONS } from \"./App\";\n\nexport default function OperationButton({ dispatch, operation }) {\n  return (\n    <button\n      onClick={() =>\n        dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })\n      }\n    >\n      {operation}\n    </button>\n  );\n}\n","import { useReducer } from \"react\";\nimport DigitButton from \"./DigitButton\";\nimport OperationButton from \"./OperationButton\";\nimport \"./styles.css\";\n\nexport const ACTIONS = {\n  ADD_DIGIT: \"add-digit\",\n  CHOOSE_OPERATION: \"choose-operation\",\n  CLEAR: \"clear\",\n  DELETE_DIGIT: \"delete-digit\",\n  EVALUATE: \"evaluate\"\n};\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false\n        };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") return state;\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\"))\n        return state;\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`\n      };\n    case ACTIONS.CLEAR:\n      return {};\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation\n        };\n      }\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null\n        };\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null\n      };\n    case ACTIONS.DELETE_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        };\n      }\n      if (state.currentOperand == null) return state;\n      if (state.currentOperand.length === 1)\n        return { ...state, currentOperand: null };\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      };\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state)\n      };\n    default:\n      break;\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation }) {\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\";\n  let computation = \"\";\n  switch (operation) {\n    case \"+\":\n      computation = prev + current;\n      break;\n    case \"-\":\n      computation = prev - current;\n      break;\n    case \"*\":\n      computation = prev * current;\n      break;\n    case \"รท\":\n      computation = prev / current;\n      break;\n    default:\n      break;\n  }\n\n  return computation.toString();\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0\n});\n\nfunction formatOperand(operand) {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split(\".\");\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`;\n}\n\nexport default function App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  );\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">\n          {formatOperand(previousOperand)} {operation}\n        </div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button\n        id=\"ac\"\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n      >\n        AC\n      </button>\n      <button id=\"del\" onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\n        DEL\n      </button>\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button\n        id=\"equals\"\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n      >\n        =\n      </button>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}